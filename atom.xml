<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[DoubleQ的博客]]></title>
  <subtitle><![CDATA[人一我百，人十我万！追逐青春的梦想，怀着自信的心，永不放弃！]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://zhanghe.ac.cn/"/>
  <updated>2015-03-20T14:14:15.067Z</updated>
  <id>http://zhanghe.ac.cn/</id>
  
  <author>
    <name><![CDATA[DoubleQ]]></name>
    <email><![CDATA[acmer_doubleq@qq.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Codeforces#295(Div.2)A、B]]></title>
    <link href="http://zhanghe.ac.cn/2015/03/02/CF295(div2)/"/>
    <id>http://zhanghe.ac.cn/2015/03/02/CF295(div2)/</id>
    <published>2015-03-02T13:51:00.000Z</published>
    <updated>2015-03-03T11:09:18.000Z</updated>
    <content type="html"><![CDATA[<h1 id="A-_Pangram">A. Pangram</h1>
<p><strong>题目链接:</strong></p>
<p>　　<a href="http://codeforces.com/contest/520/problem/A" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong></p>
<p>　　如果n小于26的话，一定无法构成字母。开两个数组记录出现的字母，然后26个字母遍历一遍即可。</p>
<p><strong>完整代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;climits&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"><span class="built_in">string</span> s;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">26</span>;</div><div class="line"><span class="keyword">bool</span> vis1[maxn] = {<span class="keyword">false</span>} , vis2[maxn] = {<span class="keyword">false</span>};</div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="preprocessor">#ifdef DoubleQ</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,stdin);</div><div class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">    std::ios::sync_with_stdio(<span class="keyword">false</span>);</div><div class="line">    std::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)</div><div class="line">    {</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; s;</div><div class="line">        <span class="keyword">if</span>(n &lt; <span class="number">26</span>)</div><div class="line">        {</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; endl;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++)</div><div class="line">        {</div><div class="line">            <span class="keyword">if</span>(s[i] &gt;= <span class="string">'a'</span> && s[i] &lt;= <span class="string">'z'</span>)</div><div class="line">                vis1[s[i] - <span class="string">'a'</span>] = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                vis2[s[i] - <span class="string">'A'</span>] = <span class="keyword">true</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; maxn ; i ++)</div><div class="line">        {</div><div class="line">            <span class="keyword">if</span>(!vis1[i] && !vis2[i])</div><div class="line">            {</div><div class="line">                flag = <span class="number">1</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">if</span>(flag)</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; endl;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; endl;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="B-_Two_Buttons">B. Two Buttons</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://codeforces.com/contest/520/problem/B" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong></p>
<p>　　此题BFS求解，因为求最短的步数嘛。不过有一点不同的是，这道题在BFS时要开两个队列，一个是n值队列，另一个是步数的队列。<br>　　为什么这样做呢，因为对每个位置，总共两种情况选择，要么n—，要么n*2。如果当我们做完第一种情况后，步数会+1。那么当我们在考虑第二种情况时，此时的步数已经变了，再+1的话会出问题。所以步数要单独用一个队列存储。</p>
<p><strong>完整代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;climits&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"><span class="keyword">int</span> n , m;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">20001</span>;</div><div class="line"><span class="keyword">bool</span> vis[maxn] = {<span class="keyword">false</span>};</div><div class="line"><span class="keyword">int</span> bfs(<span class="keyword">int</span> n , <span class="keyword">int</span> m)</div><div class="line">{</div><div class="line">    <span class="stl_container"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;</span> q1 , q2;</div><div class="line">    q1.push(n);</div><div class="line">    q2.push(<span class="number">0</span>);</div><div class="line">    <span class="keyword">while</span>(!q1.empty())</div><div class="line">    {</div><div class="line">        <span class="keyword">int</span> a = q1.front();</div><div class="line">        <span class="keyword">int</span> b = q2.front();</div><div class="line">        q1.pop();</div><div class="line">        q2.pop();</div><div class="line">        <span class="keyword">if</span>(a == m)</div><div class="line">            <span class="keyword">return</span> b;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">2</span> ; i ++)</div><div class="line">        {</div><div class="line">            <span class="keyword">int</span> c;</div><div class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>)</div><div class="line">                c = a - <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">1</span>)</div><div class="line">                c = a * <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(c == m && !vis[c])</div><div class="line">                <span class="keyword">return</span> b + <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(c &gt; <span class="number">0</span> && c &lt; <span class="number">20001</span> && !vis[c])</div><div class="line">            {</div><div class="line">                vis[c] = <span class="keyword">true</span>;</div><div class="line">                q1.push(c);</div><div class="line">                q2.push(b + <span class="number">1</span>);</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="preprocessor">#ifdef DoubleQ</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,stdin);</div><div class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line"></div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&n,&m))</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span>(n &gt;= m)</div><div class="line">        {</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span> , n - m);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        }</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span> , bfs(n , m));</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h1 id="A-_Pangram">A. Pangram</h1>
<p><strong>题目链接:</strong></p>
<p>　　<a href="http://codeforces.com/contest/520/problem/A" target="_blank"]]>
    </summary>
    
      <category term="模拟" scheme="http://zhanghe.ac.cn/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="BFS" scheme="http://zhanghe.ac.cn/tags/BFS/"/>
    
      <category term="CodeForces" scheme="http://zhanghe.ac.cn/categories/CodeForces/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ural1820]]></title>
    <link href="http://zhanghe.ac.cn/2015/03/01/Ural1820/"/>
    <id>http://zhanghe.ac.cn/2015/03/01/Ural1820/</id>
    <published>2015-03-01T05:45:00.000Z</published>
    <updated>2015-03-01T05:54:04.000Z</updated>
    <content type="html"><![CDATA[<h1 id="1820-_Ural_Steaks">1820. Ural Steaks</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1820" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong></p>
<p>　　很经典的一道题。很容易常规思维就去关注牛排的数量了，但其实我们应该关注的是牛排的面数，也就是说要烤熟一块牛排，我们每块要烤两面（正、反）。<br>　　这里有点数学又有点贪心，试几下可以发现若n &lt;= k,也就是说一个锅同时烤的容量大于给的牛排数，那么两次一正一反即可；若n &gt; k，那么我们看下面的例子：<br>5 4<br>min1 : 1 2 3 4<br>min2 : 1 2 3 5<br>min3 : 4 5<br>　　不难发现，只要三分钟即可烤完，烤的过程中我们每次只是会相对于前一次换掉一个数，这样使得时间得以缩短。那么我们只要判断下n<em>2%k是否为0，如果能整出，那么结果就是n</em>2/k，否则的话那么只需再多烤一次就一定能烤完全部的牛排。  </p>
<p><strong>完整代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;climits&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="preprocessor">#ifdef DoubleQ</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,stdin);</div><div class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">    std::ios::sync_with_stdio(<span class="keyword">false</span>);</div><div class="line">    std::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> n , k;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k)</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span>(n &lt;= k)</div><div class="line">        {</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"2"</span> &lt;&lt; endl;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">int</span> ans = n * <span class="number">2</span> / k;</div><div class="line">        <span class="keyword">if</span>( n * <span class="number">2</span> % k)</div><div class="line">            ans ++;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; endl;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h1 id="1820-_Ural_Steaks">1820. Ural Steaks</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://acm.timus.ru/problem.aspx?space=1&amp;n]]>
    </summary>
    
      <category term="经典" scheme="http://zhanghe.ac.cn/tags/%E7%BB%8F%E5%85%B8/"/>
    
      <category term="数学" scheme="http://zhanghe.ac.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="Ural" scheme="http://zhanghe.ac.cn/categories/Ural/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Codeforces#294(Div.2)A、B、C]]></title>
    <link href="http://zhanghe.ac.cn/2015/03/01/CF294(div2)/"/>
    <id>http://zhanghe.ac.cn/2015/03/01/CF294(div2)/</id>
    <published>2015-03-01T03:47:00.000Z</published>
    <updated>2015-03-03T10:54:39.000Z</updated>
    <content type="html"><![CDATA[<h1 id="A-_A_and_B_and_chess">A. A and B and chess</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://codeforces.com/contest/519/problem/A" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong></p>
<p>　　暴力的判断，King的坐标不用管。注意Knight是用N判断。</p>
<p><strong>完整代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;climits&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"></div><div class="line"><span class="built_in">string</span> s[<span class="number">8</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="preprocessor">#ifdef DoubleQ</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,stdin);</div><div class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">    std::ios::sync_with_stdio(<span class="keyword">false</span>);</div><div class="line">    std::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">8</span> ; i ++)</div><div class="line">    {</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; s[i];</div><div class="line">    }</div><div class="line">    <span class="keyword">int</span> sum1 = <span class="number">0</span> , sum2 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">8</span> ; i ++)</div><div class="line">    {</div><div class="line">        <span class="keyword">int</span> len = s[i].length();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; len ; j ++)</div><div class="line">        {</div><div class="line">            <span class="keyword">char</span> ch = s[i][j];</div><div class="line">            <span class="keyword">if</span>(ch == <span class="string">'Q'</span>)   sum1 += <span class="number">9</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">'q'</span>)  sum2 += <span class="number">9</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">'R'</span>)  sum1 += <span class="number">5</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">'r'</span>)  sum2 += <span class="number">5</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">'B'</span>)  sum1 += <span class="number">3</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">'b'</span>)  sum2 += <span class="number">3</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">'N'</span>)  sum1 += <span class="number">3</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">'n'</span>)  sum2 += <span class="number">3</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">'P'</span>)  sum1 += <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">'p'</span>)  sum2 += <span class="number">1</span>;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span>(sum1 &gt; sum2)</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"White"</span> &lt;&lt; endl;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(sum1 &lt; sum2)</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Black"</span> &lt;&lt; endl;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Draw"</span> &lt;&lt; endl;</div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="B-_A_and_B_and_Compilation_Errors">B. A and B and Compilation Errors</h1>
<p><strong>题目链接:</strong></p>
<p>　　<a href="http://codeforces.com/contest/519/problem/B" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong></p>
<p>　　找出第二次、第三次编译时，相对前一次消失的数字。开三个数组排序然后O(n)时间内比较即可。</p>
<p><strong>完整代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;climits&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100001</span>;</div><div class="line"><span class="keyword">int</span> a[maxn] , b[maxn] , c[maxn];</div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="preprocessor">#ifdef DoubleQ</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,stdin);</div><div class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&n))</div><div class="line">    {</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;n  ;i  ++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&a[i]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n -  <span class="number">1</span> ; i ++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&b[i]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; n - <span class="number">2</span> ; i ++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&c[i]);</div><div class="line">        sort(a , a + n);</div><div class="line">        sort(b , b + n - <span class="number">1</span>);</div><div class="line">        sort(c , c + n - <span class="number">2</span>);</div><div class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> res1;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n - <span class="number">1</span> ;i ++)</div><div class="line">        {</div><div class="line">            <span class="keyword">if</span>(a[i] != b[i])</div><div class="line">            {</div><div class="line">                res1 = a[i];</div><div class="line">                flag = <span class="number">1</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">if</span>(!flag)</div><div class="line">            res1 = a[n-<span class="number">1</span>];</div><div class="line"></div><div class="line">        flag = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> res2;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n - <span class="number">2</span> ;i ++)</div><div class="line">        {</div><div class="line">            <span class="keyword">if</span>(b[i] != c[i])</div><div class="line">            {</div><div class="line">                res2 = b[i];</div><div class="line">                flag = <span class="number">1</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">if</span>(!flag)</div><div class="line">            res2 = b[n-<span class="number">2</span>];</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n%d\n"</span> , res1 , res2);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="C-_A_and_B_and_Team_Training">C. A and B and Team Training</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://codeforces.com/contest/519/problem/C" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong></p>
<p>　　这道题是一道技巧题，我们注意到最多有(a + b) / 3个队伍，同时我们要考虑每个队伍中要存在a和b，二者缺一不可，所以我们取a、b、(a+b)/3的最小值即可。</p>
<p><strong>完整代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;climits&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> min(<span class="keyword">int</span> a , <span class="keyword">int</span> b , <span class="keyword">int</span> c)</div><div class="line">{</div><div class="line">    <span class="keyword">int</span> d = a &lt; b ? a : b;</div><div class="line">    <span class="keyword">return</span> d &lt; c ? d : c;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="preprocessor">#ifdef DoubleQ</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,stdin);</div><div class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">    std::ios::sync_with_stdio(<span class="keyword">false</span>);</div><div class="line">    std::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> n , m;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)</div><div class="line">    {</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; min( n , m , (n + m) / <span class="number">3</span>) &lt;&lt; endl;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h1 id="A-_A_and_B_and_chess">A. A and B and chess</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://codeforces.com/contest/519/proble]]>
    </summary>
    
      <category term="暴力" scheme="http://zhanghe.ac.cn/tags/%E6%9A%B4%E5%8A%9B/"/>
    
      <category term="排序" scheme="http://zhanghe.ac.cn/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="技巧" scheme="http://zhanghe.ac.cn/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="数学" scheme="http://zhanghe.ac.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="CodeForces" scheme="http://zhanghe.ac.cn/categories/CodeForces/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ2456]]></title>
    <link href="http://zhanghe.ac.cn/2015/02/23/POJ2456/"/>
    <id>http://zhanghe.ac.cn/2015/02/23/POJ2456/</id>
    <published>2015-02-23T06:21:00.000Z</published>
    <updated>2015-02-23T06:28:21.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Aggressive_cows">Aggressive cows</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://poj.org/problem?id=2456" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong></p>
<p>　　首先对数组进行排序，这为后面贪心操作做准备。<br>　　从0到max(a[i])进行二分。判断的时候就是当前若选择了a[i]，那么下一个选取a[j]应满足a[i]+mid &gt;= a[j]，每次都从第0个开始贪心，不难看出，这样贪心的原则是对的，的确可以做到最小值最大化。</p>
<p><strong>完整代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;climits&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"><span class="keyword">int</span> n , c;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000001</span>;</div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line"><span class="keyword">bool</span> check(<span class="keyword">int</span> mid)</div><div class="line">{</div><div class="line">    <span class="keyword">int</span> last = <span class="number">0</span> , next;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; c ; i ++)</div><div class="line">    {</div><div class="line">        next = last + <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(next &lt; n && a[next] - a[last] &lt; mid)</div><div class="line">            next ++;</div><div class="line">        <span class="keyword">if</span>(next == n)   <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        last = next;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="preprocessor">#ifdef DoubleQ</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,stdin);</div><div class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&n,&c))</div><div class="line">    {</div><div class="line">        <span class="keyword">int</span> maxx = INT_MIN;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++)</div><div class="line">        {</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&a[i]);</div><div class="line">            <span class="keyword">if</span>(a[i] &gt; maxx)</div><div class="line">                maxx = a[i];</div><div class="line">        }</div><div class="line">        sort(a , a + n);</div><div class="line">        <span class="keyword">int</span> l = <span class="number">0</span> , r = maxx , mid;</div><div class="line">        <span class="keyword">while</span>(r - l &gt; <span class="number">1</span>)</div><div class="line">        {</div><div class="line">            mid = (l + r) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(check(mid))</div><div class="line">                l = mid;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                r = mid;</div><div class="line">        }</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span> , l);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Aggressive_cows">Aggressive cows</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://poj.org/problem?id=2456" target="_blank" re]]>
    </summary>
    
      <category term="二分" scheme="http://zhanghe.ac.cn/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="最小值最大化" scheme="http://zhanghe.ac.cn/tags/%E6%9C%80%E5%B0%8F%E5%80%BC%E6%9C%80%E5%A4%A7%E5%8C%96/"/>
    
      <category term="POJ" scheme="http://zhanghe.ac.cn/categories/POJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Codeforces#291(Div.2)A、B、C]]></title>
    <link href="http://zhanghe.ac.cn/2015/02/20/CF291%EF%BC%88div2%EF%BC%89/"/>
    <id>http://zhanghe.ac.cn/2015/02/20/CF291（div2）/</id>
    <published>2015-02-20T05:11:00.000Z</published>
    <updated>2015-02-21T09:33:37.000Z</updated>
    <content type="html"><![CDATA[<h1 id="A-_Chewbaсca_and_Number">A. Chewbaсca and Number</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://codeforces.com/contest/514/problem/A" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong></p>
<p>　　一开始理解错题意了，误以为9999这种情况应该输出0，但其实应该输出9000。也就是说只有第一位要特殊判断，若是0的话输出原数，否则输出min(s[0] - ‘0’ , 9 -(s[0] - ‘0’))。至于后面那些位，就直接取最小的输出即可。</p>
<p><strong>完整代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;climits&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="preprocessor">#ifdef DoubleQ</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,stdin);</div><div class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">    std::ios::sync_with_stdio(<span class="keyword">false</span>);</div><div class="line">    std::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="built_in">string</span> s;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s)</div><div class="line">    {</div><div class="line">        <span class="keyword">int</span> len = s.length();</div><div class="line">        <span class="built_in">string</span> t = s;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len ; i ++)</div><div class="line">            s[i] = (<span class="keyword">char</span>) (min(s[i] - <span class="string">'0'</span> , <span class="number">9</span> - (s[i] - <span class="string">'0'</span>)) + <span class="string">'0'</span>);</div><div class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'0'</span>)</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; t[<span class="number">0</span>];</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">cout</span> &lt;&lt; s[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; len ; i ++)</div><div class="line">        {</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; s[i];</div><div class="line">        }</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; endl;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>



<h1 id="B-_Han_Solo_and_Lazer_Gun">B. Han Solo and Lazer Gun</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://codeforces.com/contest/514/problem/B" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong></p>
<p>　　此题暴力即可，题意是说有一个位于(x0,y0)的双向炮，每次能够射击一条直线，求最小的射击次数。<br>　　因为可能会有重复点，所以用到set。对于与(x0,y0)平行和垂直的要进行特殊处理，其他的直接看斜率即可。  </p>
<p><strong>完整代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;climits&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;set&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100001</span>;</div><div class="line"><span class="keyword">int</span> x[maxn] , y[maxn];</div><div class="line"><span class="stl_container"><span class="built_in">set</span>&lt;<span class="keyword">double</span>&gt;</span> s;</div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="preprocessor">#ifdef DoubleQ</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,stdin);</div><div class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">    std::ios::sync_with_stdio(<span class="keyword">false</span>);</div><div class="line">    std::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> n , x0 , y0;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x0 &gt;&gt; y0)</div><div class="line">    {</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++)</div><div class="line">        {</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; x[i] &gt;&gt; y[i];</div><div class="line">        }</div><div class="line">        s.clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++)</div><div class="line">        {</div><div class="line">            <span class="keyword">double</span> k;</div><div class="line">            <span class="keyword">if</span>(x[i] == x0)</div><div class="line">                k = (<span class="keyword">double</span>)INT_MAX;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(y[i] == y0)</div><div class="line">                k = (<span class="keyword">double</span>)INT_MIN;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                k = (y[i] - y0) / (<span class="keyword">double</span>)(x[i] - x0);</div><div class="line">            s.insert(k);</div><div class="line">        }</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; s.size() &lt;&lt; endl;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>



<h1 id="C-_Watto_and_Mechanism">C. Watto and Mechanism</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://codeforces.com/contest/514/problem/C" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong></p>
<p>　　难点应该在字符串的散列那，论选择一个好的散列函数的重要性。思路是构造一个sum=(sum + (s[i] - ‘a’ + 1) * base[i]) %LMOD的散列值，和红书上的字符串散列有所不同，那个感觉是对单个字符串来说的，但此题字符串数量较多。<br>　　把前n个的散列值都存入set里，接下来的m个边输入边判断。判断的规则就是对于每个字符，用与之不同的其他两个去替换，如果同时满足替换后的Hash值在set里的话，那么输出”YES”，否则”NO”。<br>　　PS：这道题的数据太大了····</p>
<p><strong>完整代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;climits&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;set&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"><span class="keyword">const</span> LL LMOD=<span class="number">1000000000000000007</span>;</div><div class="line"><span class="keyword">int</span> n , m;</div><div class="line"><span class="stl_container"><span class="built_in">set</span>&lt;LL&gt;</span> ss;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">600006</span>;</div><div class="line">LL base[maxn] = {<span class="number">1</span>};</div><div class="line"></div><div class="line"><span class="keyword">void</span> init()</div><div class="line">{</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; maxn ; i ++)</div><div class="line">        base[i] = ( base[i-<span class="number">1</span>] * <span class="number">4</span> ) % LMOD;</div><div class="line">}</div><div class="line"></div><div class="line">LL gethash(<span class="built_in">string</span> s)</div><div class="line">{</div><div class="line">    <span class="keyword">int</span> len = s.length();</div><div class="line">    LL sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len ; i ++)</div><div class="line">        sum = (sum + (s[i] - <span class="string">'a'</span> + <span class="number">1</span>) * base[i]) %LMOD;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">bool</span> check(<span class="built_in">string</span> s)</div><div class="line">{</div><div class="line">    LL temp = gethash(s);</div><div class="line">    <span class="keyword">int</span> len = s.length();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len ; i ++)</div><div class="line">    {</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= <span class="number">3</span> ; j ++)</div><div class="line">        {</div><div class="line">            <span class="keyword">if</span>((s[i] - <span class="string">'a'</span> + <span class="number">1</span>) != j && ss.count( (temp - (s[i] - <span class="string">'a'</span> + <span class="number">1</span>) * base[i] + j * base[i] + LMOD * <span class="number">2</span>) % LMOD) )</div><div class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="preprocessor">#ifdef DoubleQ</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,stdin);</div><div class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">    std::ios::sync_with_stdio(<span class="keyword">false</span>);</div><div class="line">    std::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</div><div class="line">    init();</div><div class="line">    <span class="built_in">string</span> s;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)</div><div class="line">    {</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++)</div><div class="line">        {</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; s;</div><div class="line">            ss.insert(gethash(s));</div><div class="line">        }</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; i ++)</div><div class="line">        {</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; s;</div><div class="line">            <span class="keyword">if</span>(check(s))</div><div class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; endl;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; endl;</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h1 id="A-_Chewbaсca_and_Number">A. Chewbaсca and Number</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://codeforces.com/contest/514/]]>
    </summary>
    
      <category term="模拟" scheme="http://zhanghe.ac.cn/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="暴力" scheme="http://zhanghe.ac.cn/tags/%E6%9A%B4%E5%8A%9B/"/>
    
      <category term="Hash" scheme="http://zhanghe.ac.cn/tags/Hash/"/>
    
      <category term="CodeForces" scheme="http://zhanghe.ac.cn/categories/CodeForces/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Codeforces#292 (Div.2)A、B、C]]></title>
    <link href="http://zhanghe.ac.cn/2015/02/19/CF292%EF%BC%88div2%EF%BC%89/"/>
    <id>http://zhanghe.ac.cn/2015/02/19/CF292（div2）/</id>
    <published>2015-02-19T06:17:00.000Z</published>
    <updated>2015-02-21T09:34:38.000Z</updated>
    <content type="html"><![CDATA[<h1 id="A-Drazil_and_Date">A.Drazil and Date</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://codeforces.com/contest/515/problem/A" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong></p>
<p>　　本题数据出的很好，记住unsigned int可以处理2*10^9即可。另外，最开始写了个bfs，后来发现TLE·······这个位置不应该用这么麻烦的解法，果断数学思维，a+b即是最短路。<br>　　求出最短路后，如果所给步数比最短路小的话，那必然到不了。如果给的步数多的话，就要考虑中途迂回那些步能否成立，也就是二者之差是否能被2整除，能的话则能够到达，否则不能。</p>
<p><strong>完整代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;climits&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> a , b;</div><div class="line"><span class="keyword">unsigned</span>  <span class="keyword">int</span> s;</div><div class="line"><span class="comment">/*const int maxn = 10001;</span></div><div class="line"></div><div class="line">struct node</div><div class="line">{</div><div class="line">    int x , y , step;</div><div class="line">};</div><div class="line">bool vis[maxn][maxn];</div><div class="line">int d[][2] = { {-1 , 0} , {0 , 1} , {1 , 0} , {0 , -1} };</div><div class="line">int bfs()</div><div class="line">{</div><div class="line">    memset(vis , false , sizeof(vis));</div><div class="line">    queue&lt;node&gt; q;</div><div class="line">    struct node v , v1;</div><div class="line">    v.x = 0;</div><div class="line">    v.y = 0;</div><div class="line">    v.step = 0;</div><div class="line">    q.push(v);</div><div class="line">    vis[0][0] = true;</div><div class="line">    while(!q.empty())</div><div class="line">    {</div><div class="line">        v = q.front();</div><div class="line">        q.pop();</div><div class="line">        if(v.x == a && v.y == b)</div><div class="line">        return v.step;</div><div class="line">        for(int k = 0 ; k &lt; 4 ; k ++)</div><div class="line">        {</div><div class="line">            int xx = d[k][0] + v.x;</div><div class="line">            int yy = d[k][1] + v.y;</div><div class="line">            if(xx &gt;= 0 && xx &lt;= a && yy &gt;=0 && yy &lt;= b && !vis[xx][yy])</div><div class="line">            {</div><div class="line">                vis[xx][yy] = true;</div><div class="line">                v1.x = xx;</div><div class="line">                v1.y = yy;</div><div class="line">                v1.step = v.step + 1;</div><div class="line">                q.push(v1);</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    return -1;</div><div class="line">}</div><div class="line">*/</div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&a,&b,&s))</div><div class="line">    {</div><div class="line"><span class="comment">//        int step = bfs();</span></div><div class="line">       <span class="comment">// cout &lt;&lt; step &lt;&lt; " " &lt;&lt; a + b &lt;&lt; endl;</span></div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> step = <span class="built_in">abs</span>(a) + <span class="built_in">abs</span>(b);</div><div class="line"><span class="comment">//        cout &lt;&lt; step &lt;&lt; endl;</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span>(step &gt; s)</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; endl;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        {</div><div class="line">            <span class="keyword">if</span>( (s - step) % <span class="number">2</span> == <span class="number">0</span> )</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; endl;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; endl;</div><div class="line">        }</div><div class="line"></div><div class="line">    }</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>



<h1 id="B-_Drazil_and_His_Happy_Friends">B. Drazil and His Happy Friends</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://codeforces.com/contest/515/problem/B" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong></p>
<p>　　此题暴力求解，把循环开大点即可。只要有一个为true，那么两个都置为true。</p>
<p><strong>完整代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;climits&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1001</span>;</div><div class="line"><span class="keyword">int</span> k;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> vis[maxn] , vis2[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    std::ios::sync_with_stdio(<span class="keyword">false</span>);</div><div class="line">    std::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> n , m;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)</div><div class="line">    {</div><div class="line">        <span class="keyword">int</span> b , g;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; b;</div><div class="line">        <span class="built_in">memset</span>(vis ,  <span class="keyword">false</span> ,  <span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="built_in">memset</span>(vis2 ,  <span class="keyword">false</span> ,  <span class="keyword">sizeof</span>(vis2));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; b ; i ++)</div><div class="line">        {</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; k;</div><div class="line">            vis[k] = <span class="keyword">true</span>;</div><div class="line">        }</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; g;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; g ; i ++)</div><div class="line">        {</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; k;</div><div class="line">            vis2[k] = <span class="keyword">true</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">int</span> len = <span class="number">10001</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len ; i ++)</div><div class="line">        {</div><div class="line">            <span class="keyword">if</span>(vis[i % n] || vis2[i % m])</div><div class="line">            {</div><div class="line">                vis[i % n] =  vis2[i % m] = <span class="keyword">true</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n; i ++)</div><div class="line">        {</div><div class="line">            <span class="keyword">if</span>(!vis[i])</div><div class="line">                flag = <span class="number">1</span>;</div><div class="line">         <span class="comment">//   cout &lt;&lt; vis[i] &lt;&lt; " " ;</span></div><div class="line">        }</div><div class="line">        <span class="comment">//cout &lt;&lt; endl;</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; i ++)</div><div class="line">        {</div><div class="line">            <span class="keyword">if</span>(!vis2[i])</div><div class="line">                flag = <span class="number">1</span>;</div><div class="line">           <span class="comment">// cout &lt;&lt; vis2[i] &lt;&lt; " ";</span></div><div class="line">        }</div><div class="line">        <span class="comment">//cout &lt;&lt; endl;</span></div><div class="line">        <span class="keyword">if</span>(flag)</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; endl;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; endl;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>



<h1 id="C-_Drazil_and_Factorial">C. Drazil and Factorial</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://codeforces.com/contest/515/problem/C" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong></p>
<p>　　智商是硬伤····第一反应就是质因数分解·····暴力了近200行后我发现·····靠·····那是阶乘！！！<br>　　至少思路是对的，的确跟质因数分解很像，不同的是我们分解时要按照2!、3!、5!、7!来分解，至于原因吗·····10以内的质数就他们几个。这样我们先笔算出10以内的组合（map映射），然后按照从大到小把字母排个序即可。</p>
<p><strong>完整代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;climits&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"><span class="stl_container"><span class="built_in">map</span>&lt;<span class="keyword">char</span> , <span class="built_in">string</span>&gt;</span> m;</div><div class="line"><span class="built_in">string</span> s;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> cmp(<span class="keyword">char</span> a , <span class="keyword">char</span> b)</div><div class="line">{</div><div class="line">    <span class="keyword">return</span> a &gt; b;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10001</span>;</div><div class="line"><span class="keyword">char</span> res[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="preprocessor">#ifdef DoubleQ</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,stdin);</div><div class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">    std::ios::sync_with_stdio(<span class="keyword">false</span>);</div><div class="line">    std::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</div><div class="line">    m[<span class="string">'2'</span>] = <span class="string">"2"</span>;</div><div class="line">    m[<span class="string">'3'</span>] = <span class="string">"3"</span>;</div><div class="line">    m[<span class="string">'4'</span>] = <span class="string">"322"</span>;</div><div class="line">    m[<span class="string">'5'</span>] = <span class="string">"5"</span>;</div><div class="line">    m[<span class="string">'6'</span>] = <span class="string">"53"</span>;</div><div class="line">    m[<span class="string">'7'</span>] = <span class="string">"7"</span>;</div><div class="line">    m[<span class="string">'8'</span>] = <span class="string">"7222"</span>;</div><div class="line">    m[<span class="string">'9'</span>] = <span class="string">"7332"</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s)</div><div class="line">    {</div><div class="line">        <span class="built_in">string</span> t = <span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++)</div><div class="line">        {</div><div class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'0'</span> || s[i] == <span class="string">'1'</span>)</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                t += m[s[i]];</div><div class="line">        }</div><div class="line">        <span class="keyword">int</span> len = t.length();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len ; i ++)</div><div class="line">            res[i] = t[i];</div><div class="line">        sort(res , res + len , cmp);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len ; i ++)</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; res[i];</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; endl;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h1 id="A-Drazil_and_Date">A.Drazil and Date</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://codeforces.com/contest/515/problem/A" t]]>
    </summary>
    
      <category term="数学" scheme="http://zhanghe.ac.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="数据范围" scheme="http://zhanghe.ac.cn/tags/%E6%95%B0%E6%8D%AE%E8%8C%83%E5%9B%B4/"/>
    
      <category term="暴力" scheme="http://zhanghe.ac.cn/tags/%E6%9A%B4%E5%8A%9B/"/>
    
      <category term="CodeForces" scheme="http://zhanghe.ac.cn/categories/CodeForces/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HDU1231]]></title>
    <link href="http://zhanghe.ac.cn/2015/02/14/HDU1231/"/>
    <id>http://zhanghe.ac.cn/2015/02/14/HDU1231/</id>
    <published>2015-02-14T14:28:00.000Z</published>
    <updated>2015-02-21T09:36:53.000Z</updated>
    <content type="html"><![CDATA[<h1 id="HDU1231-_最大连续子序列">HDU1231. 最大连续子序列</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1231" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong></p>
<p>　　很经典的DP，转移方程：dp[i] = max(dp[i - 1] + a[i] , dp[i]); dp[i]代表取到当前第i个数时的最大和。如果dp[i]大于maxx，那么更新maxx和ends，DP做完之后只要从ends往回推出start即可。<br>　　首先要判断下是否全为负数。</p>
<p><strong>完整代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;climits&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100001</span>;</div><div class="line"><span class="keyword">int</span> a[maxn] , dp[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="preprocessor">#ifdef DoubleQ</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,stdin);</div><div class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">    <span class="comment">//std::ios::sync_with_stdio(false);</span></div><div class="line">    <span class="comment">//std::cin.tie(0);</span></div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&n))</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)  <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++)</div><div class="line">        {</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&a[i]);</div><div class="line">            <span class="keyword">if</span>(a[i] &gt;= <span class="number">0</span>) flag = <span class="number">1</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">if</span>(flag == <span class="number">0</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"0 %d %d\n"</span> , a[<span class="number">1</span>] , a[n]);</div><div class="line">        <span class="keyword">else</span></div><div class="line">        {</div><div class="line">            <span class="built_in">memset</span>(dp , <span class="number">0</span> , <span class="keyword">sizeof</span>(dp));</div><div class="line">            <span class="keyword">int</span> maxx = INT_MIN;</div><div class="line">            <span class="keyword">int</span> start = <span class="number">0</span> , ends = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++)</div><div class="line">            {</div><div class="line">                dp[i] = max(a[i] , dp[i - <span class="number">1</span>] + a[i]);</div><div class="line">                <span class="keyword">if</span>(dp[i] &gt; maxx)</div><div class="line">                {</div><div class="line">                    maxx = dp[i];</div><div class="line">                    ends = i;</div><div class="line">                }</div><div class="line">            }</div><div class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = ends ; i &gt;= <span class="number">1</span> ; i --)</div><div class="line">            {</div><div class="line">                sum += a[i];</div><div class="line">                <span class="keyword">if</span>(sum == maxx)</div><div class="line">                {</div><div class="line">                    start = i;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                }</div><div class="line">            }</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span> , maxx , a[start] , a[ends]);</div><div class="line">        }</div><div class="line"></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h1 id="HDU1231-_最大连续子序列">HDU1231. 最大连续子序列</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1231" ]]>
    </summary>
    
      <category term="DP" scheme="http://zhanghe.ac.cn/tags/DP/"/>
    
      <category term="HDU" scheme="http://zhanghe.ac.cn/categories/HDU/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HDU1864]]></title>
    <link href="http://zhanghe.ac.cn/2015/02/14/HDU1864/"/>
    <id>http://zhanghe.ac.cn/2015/02/14/HDU1864/</id>
    <published>2015-02-14T13:42:00.000Z</published>
    <updated>2015-02-21T09:37:16.000Z</updated>
    <content type="html"><![CDATA[<h1 id="HDU1864-_最大报销额">HDU1864. 最大报销额</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1864" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong>  </p>
<p>　　背包问题，处理起来有点复杂，注意题干中的要求。每种报销额度不得超过600，三种总额度不得超过1000,。另外要注意只有A、B、C这三种，其他种不给报销。<br>　　此题有个地方可以取巧，就是把Q和后面那些额度都乘以100，变成整数，切记600和1000也要随之扩大100倍。这样就可以求出正常的ans数组。<br>　　转移方程：dp[j] = max(dp[j] , dp[j - ans[i]] + ans[i]) 。dp[j]代表报销额度为j时能够报销的最大数额，最后求出dp[m] / 100.0即可。</p>
<p><strong>完整代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;complex&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"><span class="keyword">double</span> q;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5000001</span>;</div><div class="line"><span class="keyword">int</span> dp[maxn];</div><div class="line"><span class="keyword">int</span> ans[maxn];</div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="preprocessor">#ifdef DoubleQ</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,stdin);</div><div class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">    <span class="comment">//std::ios::sync_with_stdio(false);</span></div><div class="line">    <span class="comment">//std::cin.tie(0);</span></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; q &gt;&gt; n)</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)  <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">int</span> m = (<span class="keyword">int</span>)(q * <span class="number">100.0</span>);</div><div class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++)</div><div class="line">        {</div><div class="line">            <span class="keyword">int</span> cnt;</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; cnt;</div><div class="line">            <span class="keyword">int</span> flag = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> a = <span class="number">0</span> , b = <span class="number">0</span> , c = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; cnt ; j ++)</div><div class="line">            {</div><div class="line">                getchar();</div><div class="line">                <span class="keyword">double</span> key;</div><div class="line">                <span class="keyword">char</span> ch , h;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%c%c%lf"</span> , &ch , &h , &key);</div><div class="line">                <span class="keyword">if</span>(ch == <span class="string">'A'</span> || ch == <span class="string">'B'</span> || ch == <span class="string">'C'</span>)</div><div class="line">                {</div><div class="line">                    <span class="keyword">switch</span>(ch)</div><div class="line">                    {</div><div class="line">                    <span class="keyword">case</span> <span class="string">'A'</span> :</div><div class="line">                        a += (<span class="keyword">int</span>)(key * <span class="number">100.0</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> <span class="string">'B'</span> :</div><div class="line">                        b += (<span class="keyword">int</span>)(key * <span class="number">100.0</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> <span class="string">'C'</span> :</div><div class="line">                        c += (<span class="keyword">int</span>)(key * <span class="number">100.0</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    }</div><div class="line">                    <span class="keyword">if</span>(a &gt; <span class="number">60000</span> || b &gt; <span class="number">60000</span> || c &gt; <span class="number">60000</span>)   flag = <span class="number">1</span>;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(a + b + c &gt; <span class="number">100000</span>)   flag = <span class="number">1</span>;</div><div class="line">                }</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    flag = <span class="number">1</span>;</div><div class="line">            }</div><div class="line">            <span class="keyword">if</span>(flag == <span class="number">0</span>)</div><div class="line">                ans[k++] = a + b + c;</div><div class="line"></div><div class="line">        }</div><div class="line">        <span class="built_in">memset</span>(dp , <span class="number">0</span> , <span class="keyword">sizeof</span>(dp));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; k ; i ++)</div><div class="line">        {</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = m ; j - ans[i] &gt;= <span class="number">0</span> ; j --)</div><div class="line">                dp[j] = max(dp[j] , dp[j - ans[i]] + ans[i]);</div><div class="line">        }</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span> , dp[m] / <span class="number">100.0</span>);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h1 id="HDU1864-_最大报销额">HDU1864. 最大报销额</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1864" targ]]>
    </summary>
    
      <category term="DP" scheme="http://zhanghe.ac.cn/tags/DP/"/>
    
      <category term="背包" scheme="http://zhanghe.ac.cn/tags/%E8%83%8C%E5%8C%85/"/>
    
      <category term="HDU" scheme="http://zhanghe.ac.cn/categories/HDU/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HDU2955]]></title>
    <link href="http://zhanghe.ac.cn/2015/02/14/HDU2955/"/>
    <id>http://zhanghe.ac.cn/2015/02/14/HDU2955/</id>
    <published>2015-02-14T12:43:00.000Z</published>
    <updated>2015-02-21T09:37:40.000Z</updated>
    <content type="html"><![CDATA[<h1 id="HDU2955-_Robberies">HDU2955. Robberies</h1>
<p><strong>题目链接：</strong>  </p>
<p>　　<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2955" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong>  </p>
<p>　　和下午做的一道01背包类似，转移方程：dp[j] = max(dp[j] , dp[j-a[i].money] * a[i].p)，记得这是算概率，所以要做乘法。dp[j]代表抢j块大洋的最大逃生率。<br>　　首先初始化dp[j] = 0，dp[0] = 1,因为什么都不抢，那逃生率当然是百分百。</p>
<p><strong>完整代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;complex&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000001</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> node</div><div class="line">{</div><div class="line">    <span class="keyword">int</span> money;</div><div class="line">    <span class="keyword">double</span> p;</div><div class="line">}a[maxn];</div><div class="line"></div><div class="line"><span class="keyword">double</span> dp[maxn];</div><div class="line"></div><div class="line"><span class="keyword">double</span> max(<span class="keyword">double</span> a , <span class="keyword">double</span> b)</div><div class="line">{</div><div class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="preprocessor">#ifdef DoubleQ</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,stdin);</div><div class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">    std::ios::sync_with_stdio(<span class="keyword">false</span>);</div><div class="line">    std::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; T;</div><div class="line">    <span class="keyword">while</span>(T--)</div><div class="line">    {</div><div class="line">        <span class="keyword">double</span> m , n;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</div><div class="line">        m = <span class="number">1</span> - m;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n ; i ++)</div><div class="line">        {</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; a[i].money &gt;&gt; a[i].p;</div><div class="line">            a[i].p = <span class="number">1</span> - a[i].p;</div><div class="line">            sum += a[i].money;</div><div class="line">        }</div><div class="line">        <span class="built_in">memset</span>(dp , <span class="number">0</span> , <span class="keyword">sizeof</span>(dp));</div><div class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n ; i ++)</div><div class="line">        {</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = sum ; j - a[i].money &gt;= <span class="number">0</span> ; j --)</div><div class="line">            {</div><div class="line">                dp[j] = max(dp[j] , dp[j-a[i].money] * a[i].p);</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = sum ; i &gt;= <span class="number">0</span> ; i --)</div><div class="line">        {</div><div class="line">            <span class="keyword">if</span>(dp[i] &gt; m)</div><div class="line">            {</div><div class="line">                <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; endl;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h1 id="HDU2955-_Robberies">HDU2955. Robberies</h1>
<p><strong>题目链接：</strong>  </p>
<p>　　<a href="http://acm.hdu.edu.cn/showproblem.php?pid=]]>
    </summary>
    
      <category term="DP" scheme="http://zhanghe.ac.cn/tags/DP/"/>
    
      <category term="背包" scheme="http://zhanghe.ac.cn/tags/%E8%83%8C%E5%8C%85/"/>
    
      <category term="HDU" scheme="http://zhanghe.ac.cn/categories/HDU/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ACM题目补完计划]]></title>
    <link href="http://zhanghe.ac.cn/2015/02/14/%E9%A2%98%E7%9B%AE%E5%88%86%E7%B1%BB/"/>
    <id>http://zhanghe.ac.cn/2015/02/14/题目分类/</id>
    <published>2015-02-14T10:55:00.000Z</published>
    <updated>2015-02-14T11:07:31.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ACM题目补完计划">ACM题目补完计划</h1>
<p><strong>HDU动规46道：</strong><br>　　<a href="http://www.cppblog.com/doer-xee/archive/2009/12/05/102629.html" target="_blank" rel="external">传送门</a><br><strong>POJ动规题集：</strong><br>　　<a href="http://blog.csdn.net/bipedal_bit/article/details/23549025" target="_blank" rel="external">传送门</a><br><strong>ACM综合题集：</strong><br>　　<a href="http://blog.csdn.net/liuqiyao_01/article/details/9079611" target="_blank" rel="external">传送门</a><br><strong>九野专题训练：</strong><br>　　<a href="http://blog.csdn.net/qq574857122/article/details/18039855" target="_blank" rel="external">传送门</a>  </p>
<h1 id="人一我百，人十我万！">人一我百，人十我万！</h1>
<h1 id="追逐青春的梦想，怀着自信的心，永不放弃！">追逐青春的梦想，怀着自信的心，永不放弃！</h1>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="ACM题目补完计划">ACM题目补完计划</h1>
<p><strong>HDU动规46道：</strong><br>　　<a href="http://www.cppblog.com/doer-xee/archive/2009/12/05/102629.html]]>
    </summary>
    
      <category term="题目分类" scheme="http://zhanghe.ac.cn/tags/%E9%A2%98%E7%9B%AE%E5%88%86%E7%B1%BB/"/>
    
      <category term="题目分类" scheme="http://zhanghe.ac.cn/categories/%E9%A2%98%E7%9B%AE%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ1930]]></title>
    <link href="http://zhanghe.ac.cn/2015/02/13/POJ1930/"/>
    <id>http://zhanghe.ac.cn/2015/02/13/POJ1930/</id>
    <published>2015-02-13T13:26:00.000Z</published>
    <updated>2015-02-21T09:41:09.000Z</updated>
    <content type="html"><![CDATA[<h1 id="POJ1930-_Dead_Fraction">POJ1930. Dead Fraction</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://poj.org/problem?id=1930" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong></p>
<p>　　题目大意就是给你一个小数，但小数的循环节不知道，可能从最后一位开始循环，可能最后两位循环·····求将其化成分母最小的最简分数形式。<br>　　奥数题···知识盲点····下面进行推导：<br>　　对于一个0.ddddxxxx····的无限循环小数，我们暂且设dddd为不循环部分，长度为c；设xxxx为循环节，长度为k；接下来我们设该小数是a / b的商，那么ddddxxxx可化为整数10^(k+c)<em>a/b，同理dddd可化为整数10^c</em>a/b。将两个整数相减得10^(k+c)<em>a/b - 10^c</em>a/b = dddd - xxxx，暂且设dddd = all , xxxx = num;化简得a / b = (all - num) / (10^c*(10^k - 1))<br>　　由上式得，只要求出最小的分母和相应的分子即可求得a、b的解。所以枚举这个小数的末端即可。另外需要注意：__gcd(a , b)这个函数需要用G++提交，C++提交会报CE。</p>
<p><strong>完整代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;complex&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"><span class="built_in">string</span> s;</div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="preprocessor">#ifdef DoubleQ</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,stdin);</div><div class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">    std::ios::sync_with_stdio(<span class="keyword">false</span>);</div><div class="line">    std::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s)</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span>(s == <span class="string">"0"</span>)    <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">int</span> all , num , len , k , i;</div><div class="line">        <span class="keyword">for</span>(all = <span class="number">0</span> , len = <span class="number">0</span> , i = <span class="number">2</span> ; s[i] != <span class="string">'.'</span> ; i ++)</div><div class="line">        {</div><div class="line">            all = all * <span class="number">10</span> + s[i] - <span class="number">48</span>;</div><div class="line">            len ++;</div><div class="line">        }</div><div class="line">        <span class="keyword">int</span> mina = INF , minb = INF;</div><div class="line">        <span class="keyword">for</span>(k = <span class="number">1</span> , num = all , i = <span class="number">1</span> ; i &lt;= len ; i ++)</div><div class="line">        {</div><div class="line">            num /= <span class="number">10</span>;</div><div class="line">            k *= <span class="number">10</span>;</div><div class="line">            <span class="keyword">int</span> a = all - num;</div><div class="line">            <span class="keyword">int</span> b = (<span class="keyword">int</span>)<span class="built_in">pow</span>(<span class="number">10.0</span> , len - i) * (k - <span class="number">1</span>);</div><div class="line">            <span class="keyword">int</span> c = __gcd(a , b);</div><div class="line">            <span class="keyword">if</span>(b / c &lt; minb)</div><div class="line">            {</div><div class="line">                mina = a / c;</div><div class="line">                minb = b / c;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; mina &lt;&lt; <span class="string">"/"</span> &lt;&lt; minb &lt;&lt; endl;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h1 id="POJ1930-_Dead_Fraction">POJ1930. Dead Fraction</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://poj.org/problem?id=1930" targ]]>
    </summary>
    
      <category term="奥数" scheme="http://zhanghe.ac.cn/tags/%E5%A5%A5%E6%95%B0/"/>
    
      <category term="GCD" scheme="http://zhanghe.ac.cn/tags/GCD/"/>
    
      <category term="POJ" scheme="http://zhanghe.ac.cn/categories/POJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ2429]]></title>
    <link href="http://zhanghe.ac.cn/2015/02/13/POJ2429/"/>
    <id>http://zhanghe.ac.cn/2015/02/13/POJ2429/</id>
    <published>2015-02-13T12:00:00.000Z</published>
    <updated>2015-02-21T09:42:45.000Z</updated>
    <content type="html"><![CDATA[<h1 id="POJ2429-_GCD_&amp;_LCM_Inverse">POJ2429. GCD &amp; LCM Inverse</h1>
<p><strong>题目链接:</strong></p>
<p>　　<a href="http://poj.org/problem?id=2429" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong></p>
<p>　　当年校赛原题····至今仍然记得最后一直卡在这道题上·····当年貌似是我开的·····开完就满脸泪了。题意好懂不好想，借鉴了网上JAVA的解法····JAVA大法好·····不超时。<br>　　首先明确a / gcd <em> b / gcd = lcm / gcd；并且gcd(a / gcd , b / gcd) = 1，这是一定的，因为a和b除以自己的最大公约数得到的数必然互质，不然的话怎么能叫最大公约数。那么明确我们的任务就是对lcm / gcd分解质因数即可，这里再次用到数论知识，直接从sqrt(lcm/gcd)开始枚举。为什么可以这样做呢，很明显的嘛。最后他要求两数之和最小，我们推导出两数和公式sum = i </em> a + b / i,对其进行求导，发现导数随着i的增大时减小的，那么为了和最小，我们只要从i最大逆序枚举即可。<br>　　一入玄学深似海，从此AC靠想象····</p>
<p><strong>完整代码：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>{</div><div class="line">	<span class="keyword">static</span> <span class="keyword">long</span> gcd(<span class="keyword">long</span> a , <span class="keyword">long</span> b){</div><div class="line">		<span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b , a % b);</div><div class="line">	}</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">		<span class="keyword">long</span> a , b , c; </div><div class="line">		Scanner cin = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		<span class="keyword">while</span>(cin.hasNext()){</div><div class="line">			a = cin.nextLong();</div><div class="line">			b = cin.nextLong();</div><div class="line">			c = b / a;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">long</span> i = (<span class="keyword">long</span>)Math.sqrt(c) ; i &gt;= <span class="number">1</span> ; i --){</div><div class="line">				<span class="keyword">if</span>(c % i == <span class="number">0</span> && gcd(i , c / i) == <span class="number">1</span>){</div><div class="line">					System.out.println(i * a + <span class="string">" "</span> + c / i * a);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				}</div><div class="line">			}</div><div class="line">		}</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h1 id="POJ2429-_GCD_&amp;_LCM_Inverse">POJ2429. GCD &amp; LCM Inverse</h1>
<p><strong>题目链接:</strong></p>
<p>　　<a href="http://poj.org/probl]]>
    </summary>
    
      <category term="数论" scheme="http://zhanghe.ac.cn/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="想象" scheme="http://zhanghe.ac.cn/tags/%E6%83%B3%E8%B1%A1/"/>
    
      <category term="推导" scheme="http://zhanghe.ac.cn/tags/%E6%8E%A8%E5%AF%BC/"/>
    
      <category term="POJ" scheme="http://zhanghe.ac.cn/categories/POJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ1064]]></title>
    <link href="http://zhanghe.ac.cn/2015/02/13/POJ1064/"/>
    <id>http://zhanghe.ac.cn/2015/02/13/POJ1064/</id>
    <published>2015-02-13T05:02:00.000Z</published>
    <updated>2015-02-23T05:11:35.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Cable_master">Cable master</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://poj.org/problem?id=1064" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong></p>
<p>　　比较裸的二分题。一个不小心就想当然了，上去用min(a[i])进行二分，但不然，正确姿势应该用max(a[i])二分。给出一组数据：<br>4 2<br>2.00<br>3.00<br>4.00<br>　　正确输出应该是3.00，如果按最小值二分的话会输出2.00，明显不对。<br>　　另一个坑的地方就是最后结果的输出。题目中单位按m给出，我们也按m二分，最后输出时为了保证精度要先化成cm向下取整，然后再化成m，统一单位。  </p>
<p><strong>完整代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;climits&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"><span class="keyword">int</span> n , k;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100001</span>;</div><div class="line"><span class="keyword">double</span> a[maxn];</div><div class="line"><span class="keyword">bool</span> check(<span class="keyword">double</span> mid)</div><div class="line">{</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++)</div><div class="line">    {</div><div class="line">        sum += <span class="built_in">floor</span>(a[i] / mid);</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span>(sum &gt;= k)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="preprocessor">#ifdef DoubleQ</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,stdin);</div><div class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k)</div><div class="line">    {</div><div class="line">        <span class="keyword">double</span>  maxx = -INF;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++)</div><div class="line">        {</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</div><div class="line">            <span class="keyword">if</span>(a[i] &gt; maxx)</div><div class="line">                maxx = a[i];</div><div class="line">        }</div><div class="line">        <span class="keyword">double</span> l = <span class="number">0</span> , r = maxx , mid;</div><div class="line">        <span class="keyword">while</span>(r - l &gt; <span class="number">1e-9</span>)</div><div class="line">        {</div><div class="line">            mid = (l + r) / <span class="number">2.0</span>;</div><div class="line">            <span class="keyword">if</span>(check(mid))</div><div class="line">                l = mid;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                r = mid;</div><div class="line">        }</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span> , <span class="built_in">floor</span>(r * <span class="number">100</span>) / <span class="number">100</span> );</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Cable_master">Cable master</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://poj.org/problem?id=1064" target="_blank" rel="ext]]>
    </summary>
    
      <category term="二分" scheme="http://zhanghe.ac.cn/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="精度" scheme="http://zhanghe.ac.cn/tags/%E7%B2%BE%E5%BA%A6/"/>
    
      <category term="POJ" scheme="http://zhanghe.ac.cn/categories/POJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ2415]]></title>
    <link href="http://zhanghe.ac.cn/2015/02/11/POJ2415/"/>
    <id>http://zhanghe.ac.cn/2015/02/11/POJ2415/</id>
    <published>2015-02-11T13:25:10.000Z</published>
    <updated>2015-02-21T09:42:20.000Z</updated>
    <content type="html"><![CDATA[<h1 id="POJ2415-_Hike_on_a_Graph">POJ2415. Hike on a Graph</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://poj.org/problem?id=2415" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong>  </p>
<p>　　题目大意就是给一个n，然后给出p1、p2、p3，在给n*n的图，问这三个球是否能到达同一位置。一个球能到达另一个位置的条件是移动的那条边与另外两球连着那条边颜色相同。<br>　　BFS简单粗暴。与以往不同的是标记数组vis要开成三维，代表三个球的位置。for循环里我们要用三个if来分别判断三个球的变化。<br>　　最后一定要注意下标从1开始，因为如果从0开始的话，那么标记数组要增加很多细节处理（因为输入的pi &gt;= 1）。  </p>
<p><strong>完整代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"><span class="keyword">int</span> p1 , p2 , p3 , n;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">51</span>;</div><div class="line"><span class="keyword">int</span> vis[maxn][maxn][maxn];</div><div class="line"><span class="keyword">char</span> g[maxn][maxn];</div><div class="line"></div><div class="line"><span class="keyword">struct</span> node</div><div class="line">{</div><div class="line">    <span class="keyword">int</span> x , y , z , step;</div><div class="line">};</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> bfs(<span class="keyword">int</span> p1 , <span class="keyword">int</span> p2 , <span class="keyword">int</span> p3)</div><div class="line">{</div><div class="line">    <span class="built_in">memset</span>(vis , <span class="number">0</span> , <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="stl_container"><span class="built_in">queue</span>&lt;node&gt;</span> q;</div><div class="line">    node v , v1;</div><div class="line">    v.x = p1;</div><div class="line">    v.y = p2;</div><div class="line">    v.z = p3;</div><div class="line">    v.step = <span class="number">0</span>;</div><div class="line">    q.push(v);</div><div class="line">    vis[p1][p2][p3] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty())</div><div class="line">    {</div><div class="line">        v = q.front();</div><div class="line">        q.pop();</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(v.x == v.y && v.y == v.z)</div><div class="line">            <span class="keyword">return</span> v.step;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++)</div><div class="line">        {</div><div class="line">            <span class="keyword">if</span>(g[v.x][i] == g[v.y][v.z] && !vis[i][v.y][v.z])</div><div class="line">            {</div><div class="line">                vis[i][v.y][v.z] = <span class="number">1</span>;</div><div class="line">                v1.x = i;</div><div class="line">                v1.y = v.y;</div><div class="line">                v1.z = v.z;</div><div class="line">                v1.step = v.step + <span class="number">1</span>;</div><div class="line">                q.push(v1);</div><div class="line">            }</div><div class="line">            <span class="keyword">if</span>(g[v.y][i] == g[v.x][v.z] && !vis[v.x][i][v.z])</div><div class="line">            {</div><div class="line">                vis[v.x][i][v.z] = <span class="number">1</span>;</div><div class="line">                v1.x = v.x;</div><div class="line">                v1.y = i;</div><div class="line">                v1.z = v.z;</div><div class="line">                v1.step = v.step + <span class="number">1</span>;</div><div class="line">                q.push(v1);</div><div class="line">            }</div><div class="line">            <span class="keyword">if</span>(g[v.z][i] == g[v.x][v.y] && !vis[v.x][v.y][i])</div><div class="line">            {</div><div class="line">                vis[v.x][v.y][i] = <span class="number">1</span>;</div><div class="line">                v1.x = v.x;</div><div class="line">                v1.y = v.y;</div><div class="line">                v1.z = i;</div><div class="line">                v1.step = v.step + <span class="number">1</span>;</div><div class="line">                q.push(v1);</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">}</div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="preprocessor">#ifdef DoubleQ</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,stdin);</div><div class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">    std::ios::sync_with_stdio(<span class="keyword">false</span>);</div><div class="line">    std::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)  <span class="keyword">break</span>;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; p1 &gt;&gt; p2 &gt;&gt; p3;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= n ; j ++)</div><div class="line">                <span class="built_in">cin</span> &gt;&gt; g[i][j];</div><div class="line">        <span class="keyword">if</span>(p1 == p2 && p2 == p3)</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"0"</span> &lt;&lt; endl;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        {</div><div class="line">            <span class="keyword">if</span>(bfs(p1 , p2 , p3) == -<span class="number">1</span>)</div><div class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"impossible"</span> &lt;&lt; endl;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="built_in">cout</span> &lt;&lt; bfs(p1 , p2 , p3) &lt;&lt; endl;</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h1 id="POJ2415-_Hike_on_a_Graph">POJ2415. Hike on a Graph</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://poj.org/problem?id=2415" ]]>
    </summary>
    
      <category term="BFS" scheme="http://zhanghe.ac.cn/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ1101]]></title>
    <link href="http://zhanghe.ac.cn/2015/02/10/POJ1101/"/>
    <id>http://zhanghe.ac.cn/2015/02/10/POJ1101/</id>
    <published>2015-02-10T08:39:03.000Z</published>
    <updated>2015-02-21T09:38:51.000Z</updated>
    <content type="html"><![CDATA[<h1 id="POJ1101-_The_Game">POJ1101. The Game</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://poj.org/problem?id=1101" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong></p>
<p>　　初看此题一位是普通的BFS，最多就是边界处理时多加一层而已，果断正常思路写。结果样例输出一直对不上，重读了下题才发现不是求最小步数，是求最小的线段数·····我靠····于是在结构体里加了个方向的变量，还是写残了····<br>　　看了网上的分析，我们这里BFS不关心步数，只关心线段，那么索性选一个方向搜到头，直到不能搜为止。仔细想想这种思想是对的，因为这样做虽然不能保证最后步数是最少的，但一定可以保证线段数是最少的，恰好符合题意。<br>　　最后提醒一下，加速器还是少使用吧，它和getline一起可能会发生问题，不要问我为什么，亲身试过。另外，此题当消掉一组之后，并不能在图里将这两个位置变为空·····以我打麻将的常识，起初我一直以为如果能够消掉的话，原图也要做相应修改·····WA了好几次后我发现不用修改····不符合打麻将常理啊···</p>
<p><strong>完整代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"><span class="keyword">int</span> n , m;</div><div class="line"><span class="built_in">string</span> s;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">81</span>;</div><div class="line"><span class="keyword">char</span> g[maxn][maxn];</div><div class="line"><span class="keyword">int</span> vis[maxn][maxn];</div><div class="line"><span class="keyword">int</span> d[][<span class="number">2</span>] = { -<span class="number">1</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">1</span> , <span class="number">1</span> , <span class="number">0</span> , <span class="number">0</span> , -<span class="number">1</span> };</div><div class="line"><span class="keyword">int</span> sx , sy , tx , ty;</div><div class="line"><span class="keyword">struct</span> node</div><div class="line">{</div><div class="line">    <span class="keyword">int</span> x,  y , turn;</div><div class="line">};</div><div class="line"></div><div class="line"><span class="keyword">int</span> bfs(<span class="keyword">int</span> sx , <span class="keyword">int</span> sy , <span class="keyword">int</span> tx , <span class="keyword">int</span> ty)</div><div class="line">{</div><div class="line">    <span class="built_in">memset</span>(vis , <span class="number">0</span> , <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="stl_container"><span class="built_in">queue</span>&lt;node&gt;</span> q;</div><div class="line">    <span class="keyword">struct</span> node v , v1;</div><div class="line">    v.x = sx;</div><div class="line">    v.y = sy;</div><div class="line">    v.turn = <span class="number">0</span>;</div><div class="line">    q.push(v);</div><div class="line">    vis[sx][sy] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty())</div><div class="line">    {</div><div class="line">        v = q.front();</div><div class="line">        q.pop();</div><div class="line">        v.turn ++;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span> ; k &lt; <span class="number">4</span> ; k ++)</div><div class="line">        {</div><div class="line">            <span class="keyword">int</span> xx = v.x + d[k][<span class="number">0</span>];</div><div class="line">            <span class="keyword">int</span> yy = v.y + d[k][<span class="number">1</span>];</div><div class="line">            <span class="keyword">if</span>(xx &lt; <span class="number">0</span> || xx &gt; n + <span class="number">1</span> || yy &lt; <span class="number">0</span> || yy &gt; m + <span class="number">1</span>)</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">            {</div><div class="line">                <span class="keyword">if</span>(xx == tx && yy == ty)</div><div class="line">                    <span class="keyword">return</span> v.turn;</div><div class="line">                <span class="keyword">if</span>(xx &lt; <span class="number">0</span> || xx &gt; n + <span class="number">1</span> || yy &lt; <span class="number">0</span> || yy &gt; m + <span class="number">1</span> || g[xx][yy] == <span class="string">'X'</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">if</span>(!vis[xx][yy])</div><div class="line">                {</div><div class="line">                    vis[xx][yy] = <span class="number">1</span>;</div><div class="line">                    v1.x = xx;</div><div class="line">                    v1.y = yy;</div><div class="line">                    v1.turn = v.turn;</div><div class="line">                    q.push(v1);</div><div class="line">                }</div><div class="line">                xx += d[k][<span class="number">0</span>];</div><div class="line">                yy += d[k][<span class="number">1</span>];</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="preprocessor">#ifdef DoubleQ</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,stdin);</div><div class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">  <span class="comment">//  std::ios::sync_with_stdio(false);</span></div><div class="line">   <span class="comment">// std::cin.tie(0);</span></div><div class="line">    <span class="keyword">int</span> cas = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&m,&n))</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">0</span> && m == <span class="number">0</span>)    <span class="keyword">break</span>;</div><div class="line">        getchar();</div><div class="line">        <span class="built_in">memset</span>(g , <span class="string">'.'</span> , <span class="keyword">sizeof</span>(g));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++)</div><div class="line">        {</div><div class="line">            getline(<span class="built_in">cin</span> , s);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= m ; j ++)</div><div class="line">                g[i][j] = s[j-<span class="number">1</span>];</div><div class="line">        }</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Board #"</span> &lt;&lt; cas++ &lt;&lt; <span class="string">":"</span> &lt;&lt; endl;</div><div class="line">        <span class="keyword">int</span> step = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&sy , &sx , &ty , &tx))</div><div class="line">        {</div><div class="line">            <span class="keyword">if</span>(sy == <span class="number">0</span> && sx == <span class="number">0</span> && tx == <span class="number">0</span> && ty == <span class="number">0</span>)    <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(g[sx][sy] != <span class="string">'X'</span> || g[tx][ty] != <span class="string">'X'</span>)</div><div class="line">            {</div><div class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Pair "</span> &lt;&lt; step++ &lt;&lt; <span class="string">": impossible."</span> &lt;&lt; endl;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            }</div><div class="line">            g[sx][sy] = g[tx][ty] = <span class="string">'.'</span>;</div><div class="line">            <span class="keyword">if</span>(bfs(sx , sy , tx , ty) == -<span class="number">1</span>)</div><div class="line">            {</div><div class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Pair "</span> &lt;&lt; step++ &lt;&lt; <span class="string">": impossible."</span> &lt;&lt; endl;</div><div class="line"></div><div class="line">            }</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Pair "</span> &lt;&lt; step++ &lt;&lt; <span class="string">": "</span> &lt;&lt; bfs(sx , sy , tx , ty) &lt;&lt; <span class="string">" segments."</span> &lt;&lt; endl;</div><div class="line">            g[sx][sy] = g[tx][ty] = <span class="string">'X'</span>;</div><div class="line">        }</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; endl;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h1 id="POJ1101-_The_Game">POJ1101. The Game</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://poj.org/problem?id=1101" target="_blank]]>
    </summary>
    
      <category term="BFS" scheme="http://zhanghe.ac.cn/tags/BFS/"/>
    
      <category term="POJ" scheme="http://zhanghe.ac.cn/categories/POJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ1111]]></title>
    <link href="http://zhanghe.ac.cn/2015/02/09/POJ1111/"/>
    <id>http://zhanghe.ac.cn/2015/02/09/POJ1111/</id>
    <published>2015-02-09T15:56:33.000Z</published>
    <updated>2015-02-21T09:39:11.000Z</updated>
    <content type="html"><![CDATA[<h1 id="POJ1111-_Image_Perimeters">POJ1111. Image Perimeters</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://poj.org/problem?id=1111" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong></p>
<p>　　题意是说给你一个n*m的图，然后给你一个(sx,sy)，求其所在连通块的周长，连通块由字母X构成。<br>　　这道题很有趣，刚开始让我想起水洼那道题。仔细想想，二者是有类似的。都是求连通块，所以上DFS。至于他所说的周长嘛，可以这样分析下：<br>　　每个X格子对自己周长的贡献是4，减去他与四个方向的相邻边，就是他为整体贡献的周长，么么哒</p>
<p><strong>完整代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;complex&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"><span class="keyword">int</span> n , m , sx , sy;</div><div class="line"><span class="built_in">string</span> s;</div><div class="line"><span class="keyword">int</span> d[][<span class="number">2</span>] = { -<span class="number">1</span> , <span class="number">0</span> , -<span class="number">1</span> , <span class="number">1</span> , <span class="number">0</span> , <span class="number">1</span> , <span class="number">1</span> , <span class="number">1</span> , <span class="number">1</span> , <span class="number">0</span> , <span class="number">1</span> , -<span class="number">1</span> , <span class="number">0</span> , -<span class="number">1</span> , -<span class="number">1</span> , -<span class="number">1</span> };</div><div class="line"><span class="keyword">int</span> d2[][<span class="number">2</span>] = {-<span class="number">1</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">1</span> , <span class="number">1</span> , <span class="number">0</span> , <span class="number">0</span> , -<span class="number">1</span>};</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">21</span>;</div><div class="line"><span class="keyword">int</span> g[maxn][maxn];</div><div class="line"><span class="keyword">int</span> vis[maxn][maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"></div><div class="line"><span class="keyword">int</span> check(<span class="keyword">int</span> i , <span class="keyword">int</span> j)</div><div class="line">{</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span> ; k &lt; <span class="number">4</span> ; k ++)</div><div class="line">    {</div><div class="line">        <span class="keyword">int</span> xx = i + d2[k][<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> yy = j + d2[k][<span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span>(xx &gt;= <span class="number">1</span> && xx &lt;= n && yy &gt;= <span class="number">1</span> && yy &lt;= m &&g[xx][yy])</div><div class="line">            sum ++;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">void</span> dfs(<span class="keyword">int</span> i , <span class="keyword">int</span> j)</div><div class="line">{</div><div class="line">    cnt += <span class="number">4</span>;</div><div class="line">    cnt -= check(i , j);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span> ; k &lt; <span class="number">8</span> ; k ++)</div><div class="line">    {</div><div class="line">        <span class="keyword">int</span> xx = i + d[k][<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> yy = j + d[k][<span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span>(xx &gt;= <span class="number">1</span> && xx &lt;= n && yy &gt;= <span class="number">1</span> && yy &lt;= m && !vis[xx][yy] && g[xx][yy])</div><div class="line">        {</div><div class="line">            vis[xx][yy] = <span class="number">1</span>;</div><div class="line">            dfs(xx , yy);</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="preprocessor">#ifdef DoubleQ</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,stdin);</div><div class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">    std::ios::sync_with_stdio(<span class="keyword">false</span>);</div><div class="line">    std::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; sx &gt;&gt; sy)</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">0</span> && m == <span class="number">0</span> && sx == <span class="number">0</span> && sy == <span class="number">0</span>)  <span class="keyword">break</span>;</div><div class="line">        <span class="built_in">memset</span>(g , <span class="number">0</span> , <span class="keyword">sizeof</span>(g));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++)</div><div class="line">        {</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; s;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= m ; j ++)</div><div class="line">            {</div><div class="line">                <span class="keyword">if</span>(s[j-<span class="number">1</span>] == <span class="string">'X'</span>)</div><div class="line">                    g[i][j] = <span class="number">1</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line">        cnt = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(vis , <span class="number">0</span> , <span class="keyword">sizeof</span>(vis));</div><div class="line">        vis[sx][sy] = <span class="number">1</span>;</div><div class="line">        dfs(sx , sy);</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; endl;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h1 id="POJ1111-_Image_Perimeters">POJ1111. Image Perimeters</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://poj.org/problem?id=1111]]>
    </summary>
    
      <category term="DFS" scheme="http://zhanghe.ac.cn/tags/DFS/"/>
    
      <category term="POJ" scheme="http://zhanghe.ac.cn/categories/POJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ1915]]></title>
    <link href="http://zhanghe.ac.cn/2015/02/09/POJ1915/"/>
    <id>http://zhanghe.ac.cn/2015/02/09/POJ1915/</id>
    <published>2015-02-09T04:48:10.000Z</published>
    <updated>2015-02-21T09:40:18.000Z</updated>
    <content type="html"><![CDATA[<h1 id="POJ1915-_Knight_Moves">POJ1915. Knight Moves</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://poj.org/problem?id=1915" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong></p>
<p>　　被神题狂虐过后再做这些水题感觉就是爽·····<br>　　普通的BFS，只不过八个方向照以往有所不同，稍微注意下即可。<br>　　最后再补充下·····真的很爽····</p>
<p><strong>完整代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">301</span>;</div><div class="line"><span class="keyword">int</span> g[maxn][maxn];</div><div class="line"><span class="keyword">int</span> vis[maxn][maxn];</div><div class="line"><span class="keyword">int</span> sx , sy , tx , ty;</div><div class="line"><span class="keyword">int</span> len;</div><div class="line"><span class="keyword">int</span> d[][<span class="number">2</span>] = { -<span class="number">2</span> , <span class="number">1</span> , -<span class="number">1</span> , <span class="number">2</span> , <span class="number">1</span> , <span class="number">2</span> , <span class="number">2</span> , <span class="number">1</span> , <span class="number">2</span> , -<span class="number">1</span> , <span class="number">1</span> , -<span class="number">2</span> , -<span class="number">1</span> , -<span class="number">2</span> , -<span class="number">2</span> , -<span class="number">1</span> };</div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">{</div><div class="line">    <span class="keyword">int</span> x , y;</div><div class="line">    <span class="keyword">int</span> minn;</div><div class="line">}node;</div><div class="line"></div><div class="line"><span class="keyword">int</span> bfs(<span class="keyword">int</span> sx , <span class="keyword">int</span> sy)</div><div class="line">{</div><div class="line">    <span class="built_in">memset</span>(vis , <span class="number">0</span> , <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="stl_container"><span class="built_in">queue</span>&lt;Node&gt;</span> q;</div><div class="line">    <span class="keyword">struct</span> Node v , v1;</div><div class="line">    v.x = sx;</div><div class="line">    v.y = sy;</div><div class="line">    v.minn = <span class="number">0</span>;</div><div class="line">    q.push(v);</div><div class="line">    vis[v.x][v.y] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty())</div><div class="line">    {</div><div class="line">        v = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="keyword">if</span>(v.x == tx && v.y == ty)</div><div class="line">            <span class="keyword">return</span> v.minn;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span> ; k &lt; <span class="number">8</span> ; k ++)</div><div class="line">        {</div><div class="line">            <span class="keyword">int</span> xx = v.x + d[k][<span class="number">0</span>];</div><div class="line">            <span class="keyword">int</span> yy = v.y + d[k][<span class="number">1</span>];</div><div class="line">            <span class="keyword">if</span>(xx &gt;=<span class="number">0</span> && xx &lt; len && yy &gt;=<span class="number">0</span> && yy &lt; len && vis[xx][yy] == <span class="number">0</span>)</div><div class="line">            {</div><div class="line">                vis[xx][yy] = <span class="number">1</span>;</div><div class="line">                v1.x = xx;</div><div class="line">                v1.y = yy;</div><div class="line">                v1.minn = v.minn + <span class="number">1</span>;</div><div class="line">                q.push(v1);</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="preprocessor">#ifdef DoubleQ</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,stdin);</div><div class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">    std::ios::sync_with_stdio(<span class="keyword">false</span>);</div><div class="line">    std::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; T;</div><div class="line">    <span class="keyword">while</span>(T--)</div><div class="line">    {</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; len;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; sx &gt;&gt; sy &gt;&gt; tx &gt;&gt; ty;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; bfs(sx , sy) &lt;&lt; endl;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h1 id="POJ1915-_Knight_Moves">POJ1915. Knight Moves</h1>
<p><strong>题目链接：</strong></p>
<p>　　<a href="http://poj.org/problem?id=1915" target]]>
    </summary>
    
      <category term="BFS" scheme="http://zhanghe.ac.cn/tags/BFS/"/>
    
      <category term="POJ" scheme="http://zhanghe.ac.cn/categories/POJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HDU4771]]></title>
    <link href="http://zhanghe.ac.cn/2015/02/09/HDU4771/"/>
    <id>http://zhanghe.ac.cn/2015/02/09/HDU4771/</id>
    <published>2015-02-09T04:48:10.000Z</published>
    <updated>2015-02-21T09:38:13.000Z</updated>
    <content type="html"><![CDATA[<h1 id="HDU4771-_Stealing_Harry_Potter’s_Precious">HDU4771. Stealing Harry Potter’s Precious</h1>
<p><strong>题目链接：</strong>  </p>
<p>　　<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4771" target="_blank" rel="external">传送门</a></p>
<p><strong>解题思路：</strong>  </p>
<p>　　题目大意就是给一个图，’#’代表墙，’@’代表出发点，k行坐标代表要盗取物品的位置，求盗取所有物品步数最少。<br>　　每当涉及到最少这个字样的时候都会想到BFS，在这道题里我们用BFS处理出当前点到其他所有点的最短距离，接下来用DFS去暴力搜索取最小值即可。<br>　　个人认为此题真心不错！！！</p>
<p><strong>完整代码：</strong> </p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"><span class="keyword">int</span> n , m , k , ans;</div><div class="line"><span class="keyword">int</span> d[][<span class="number">2</span>] = { -<span class="number">1</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">1</span> , <span class="number">1</span> , <span class="number">0</span> , <span class="number">0</span> , -<span class="number">1</span> };</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">101</span>;</div><div class="line"><span class="keyword">char</span> g[maxn][maxn];</div><div class="line"><span class="keyword">int</span> dis[maxn][maxn];</div><div class="line"><span class="keyword">int</span> vis[maxn][maxn] , f[maxn];</div><div class="line"><span class="built_in">string</span> s;</div><div class="line"><span class="keyword">struct</span> node</div><div class="line">{</div><div class="line">    <span class="keyword">int</span> x , y;</div><div class="line">}node[maxn];</div><div class="line"></div><div class="line"><span class="keyword">struct</span> que</div><div class="line">{</div><div class="line">    <span class="keyword">int</span> x , y , minn;</div><div class="line">};</div><div class="line"></div><div class="line"><span class="keyword">int</span> bfs(<span class="keyword">int</span> i , <span class="keyword">int</span> j)</div><div class="line">{</div><div class="line">    <span class="built_in">memset</span>(vis , <span class="number">0</span> , <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="stl_container"><span class="built_in">queue</span>&lt;que&gt;</span> q;</div><div class="line">    <span class="keyword">struct</span> que v , v1;</div><div class="line">    v.x = node[i].x;</div><div class="line">    v.y = node[i].y;</div><div class="line">    v.minn = <span class="number">0</span>;</div><div class="line">    q.push(v);</div><div class="line">    vis[v.x][v.y] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(!q.empty())</div><div class="line">    {</div><div class="line">        v = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="keyword">if</span>(v.x == node[j].x && v.y == node[j].y)</div><div class="line">            <span class="keyword">return</span> v.minn;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span> ; k &lt; <span class="number">4</span> ; k ++)</div><div class="line">        {</div><div class="line">            <span class="keyword">int</span> xx = v.x + d[k][<span class="number">0</span>];</div><div class="line">            <span class="keyword">int</span> yy = v.y + d[k][<span class="number">1</span>];</div><div class="line">            <span class="keyword">if</span>(g[xx][yy] != <span class="string">'#'</span> && vis[xx][yy] == <span class="number">0</span>)</div><div class="line">            {</div><div class="line">                vis[xx][yy] = <span class="number">1</span>;</div><div class="line">                v1.x = xx;</div><div class="line">                v1.y = yy;</div><div class="line">                v1.minn = v.minn + <span class="number">1</span>;</div><div class="line">                q.push(v1);</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">void</span> dfs(<span class="keyword">int</span> f[] , <span class="keyword">int</span> k , <span class="keyword">int</span> pre , <span class="keyword">int</span> sum , <span class="keyword">int</span> cnt)</div><div class="line">{</div><div class="line">    <span class="keyword">if</span>(cnt &gt;= k)</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span>(ans &gt; sum)</div><div class="line">            ans = sum;</div><div class="line">    }</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= k ; i ++)</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span>(f[i] == <span class="number">0</span>)</div><div class="line">        {</div><div class="line">            f[i] = <span class="number">1</span>;</div><div class="line">            dfs(f , k , i , sum + dis[pre][i] , cnt + <span class="number">1</span>);</div><div class="line">            f[i] = <span class="number">0</span>;</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="preprocessor">#ifdef DoubleQ</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,stdin);</div><div class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">    std::ios::sync_with_stdio(<span class="keyword">false</span>);</div><div class="line">    std::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">0</span> && m == <span class="number">0</span>)    <span class="keyword">break</span>;</div><div class="line">        <span class="built_in">memset</span>(g , <span class="string">'#'</span> , <span class="keyword">sizeof</span>(g));</div><div class="line">        <span class="keyword">int</span> sx , sy;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++)</div><div class="line">        {</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; s;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= m ; j ++)</div><div class="line">            {</div><div class="line">                g[i][j] = s[j-<span class="number">1</span>];</div><div class="line">                <span class="keyword">if</span>(s[j-<span class="number">1</span>] == <span class="string">'@'</span>)</div><div class="line">                {</div><div class="line">                    sx = i;</div><div class="line">                    sy = j;</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line">        node[<span class="number">0</span>].x = sx;</div><div class="line">        node[<span class="number">0</span>].y = sy;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; k;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= k ; i ++)</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; node[i].x &gt;&gt; node[i].y;</div><div class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(dis , -<span class="number">1</span> , <span class="keyword">sizeof</span>(dis));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= k ; i ++)</div><div class="line">        {</div><div class="line">            dis[i][i] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt;= k ; j ++)</div><div class="line">            {</div><div class="line">                <span class="keyword">if</span>(dis[i][j] == -<span class="number">1</span> && flag == <span class="number">0</span>)</div><div class="line">                {</div><div class="line">                    dis[i][j] = dis[j][i] = bfs(i , j);</div><div class="line">                    <span class="keyword">if</span>(dis[i][j] == -<span class="number">1</span>)</div><div class="line">                    {</div><div class="line">                        flag = <span class="number">1</span>;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    }</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">if</span>(flag)</div><div class="line">        {</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span> &lt;&lt; endl;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        }</div><div class="line">        <span class="built_in">memset</span>(f , <span class="number">0</span> , <span class="keyword">sizeof</span>(f));</div><div class="line">        ans = INF;</div><div class="line">        dfs(f , k , <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span>);</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; endl;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h1 id="HDU4771-_Stealing_Harry_Potter’s_Precious">HDU4771. Stealing Harry Potter’s Precious</h1>
<p><strong>题目链接：</strong>  </p>
<p>　　<a hr]]>
    </summary>
    
      <category term="BFS" scheme="http://zhanghe.ac.cn/tags/BFS/"/>
    
      <category term="DFS" scheme="http://zhanghe.ac.cn/tags/DFS/"/>
    
      <category term="HDU" scheme="http://zhanghe.ac.cn/categories/HDU/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ1129]]></title>
    <link href="http://zhanghe.ac.cn/2015/02/08/POJ1129/"/>
    <id>http://zhanghe.ac.cn/2015/02/08/POJ1129/</id>
    <published>2015-02-08T04:48:10.000Z</published>
    <updated>2015-02-21T09:39:32.000Z</updated>
    <content type="html"><![CDATA[<h1 id="POJ1129-_Channel_Allocation">POJ1129. Channel Allocation</h1>
<p><strong>题目链接：</strong>  </p>
<p>　　<a href="http://poj.org/problem?id=1129" target="_blank" rel="external">传送门</a> </p>
<p><strong>解题思路：</strong>  </p>
<p>　　题意就是说行首字母与其他字母相邻，为了不干扰信号，相邻的不可以在同一轨道。求最少需要的轨道数。<br>　　怎么看也看不出来搜索···蒙蒙哒····但是这道题真的要用深搜做···<br>　　首先构造二维矩阵，相邻位置为true，不相邻为false。至少会需要一种颜色，所以从下标为0，所需颜色种数1开始深搜。<br>　　对于点i的染色：从最小的颜色开始搜索，当i的直接相邻（直接后继）结点已经染过该种颜色时，搜索下一种颜色。就是说i的染色，当且仅当i的临近结点都没有染过该种颜色，且该种颜色要尽可能小．　　</p>
<p><strong>完整代码：</strong> </p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;complex&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">27</span>;</div><div class="line"><span class="keyword">bool</span> g[maxn][maxn];</div><div class="line"><span class="keyword">int</span> color[maxn];</div><div class="line"><span class="keyword">int</span> n , res;</div><div class="line"><span class="keyword">bool</span> isfind;</div><div class="line"><span class="built_in">string</span> s;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> check(<span class="keyword">int</span> id , <span class="keyword">int</span> c)</div><div class="line">{</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++)</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span>(g[id][i] && c == color[i])</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">void</span> dfs(<span class="keyword">int</span> id , <span class="keyword">int</span> total)</div><div class="line">{</div><div class="line">    <span class="keyword">if</span>(isfind)  <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(id &gt;= n)</div><div class="line">    {</div><div class="line">        isfind = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= total ; i ++)</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span>(check(id , i))</div><div class="line">        {</div><div class="line">            color[id] = i;</div><div class="line">            dfs(id + <span class="number">1</span> , total);</div><div class="line">            color[id] = <span class="number">0</span>;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span>(!isfind)</div><div class="line">    {</div><div class="line">        res ++;</div><div class="line">        dfs(id , total + <span class="number">1</span>);</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="preprocessor">#ifdef DoubleQ</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,stdin);</div><div class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">    std::ios::sync_with_stdio(<span class="keyword">false</span>);</div><div class="line">    std::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)  <span class="keyword">break</span>;</div><div class="line">        <span class="built_in">memset</span>(color , <span class="number">0</span> , <span class="keyword">sizeof</span>(color));</div><div class="line">        <span class="built_in">memset</span>(g , <span class="keyword">false</span> , <span class="keyword">sizeof</span>(g));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++)</div><div class="line">        {</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; s;</div><div class="line">            <span class="keyword">int</span> len = s.length();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span> ; j &lt; len ; j ++)</div><div class="line">                g[ s[<span class="number">0</span>] - <span class="string">'A'</span> ][ s[j] - <span class="string">'A'</span> ] = <span class="keyword">true</span>;</div><div class="line">        }</div><div class="line">        res = <span class="number">1</span>;</div><div class="line">        isfind = <span class="keyword">false</span>;</div><div class="line">        dfs(<span class="number">0</span> , <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span>(res == <span class="number">1</span>)</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">" channel needed."</span> &lt;&lt; endl;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">" channels needed."</span> &lt;&lt; endl;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h1 id="POJ1129-_Channel_Allocation">POJ1129. Channel Allocation</h1>
<p><strong>题目链接：</strong>  </p>
<p>　　<a href="http://poj.org/problem?i]]>
    </summary>
    
      <category term="DFS" scheme="http://zhanghe.ac.cn/tags/DFS/"/>
    
      <category term="POJ" scheme="http://zhanghe.ac.cn/categories/POJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[POJ1979]]></title>
    <link href="http://zhanghe.ac.cn/2015/02/06/POJ1979/"/>
    <id>http://zhanghe.ac.cn/2015/02/06/POJ1979/</id>
    <published>2015-02-06T04:48:10.000Z</published>
    <updated>2015-02-21T09:41:33.000Z</updated>
    <content type="html"><![CDATA[<h1 id="POJ1979">POJ1979</h1>
<p><strong>题目链接：</strong>  </p>
<p>　　<a href="http://poj.org/problem?id=1979" target="_blank" rel="external">传送门</a>  </p>
<p><strong>解题思路：</strong>  </p>
<p>　　题目很简单，记录下起始点位置，然后对该点进行dfs（深搜）即可。  </p>
<p><strong>完整代码：</strong>  </p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;complex&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="keyword">int</span>(<span class="number">1e9</span>)+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(-<span class="number">1.0</span>); <span class="comment">//M_PI;</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">101</span>;</div><div class="line"><span class="keyword">char</span> g[maxn][maxn];</div><div class="line"><span class="built_in">string</span> s;</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">int</span> n , m;</div><div class="line"><span class="keyword">int</span> d[<span class="number">4</span>][<span class="number">2</span>] = { -<span class="number">1</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">1</span> , <span class="number">1</span> , <span class="number">0</span> , <span class="number">0</span> , -<span class="number">1</span> };</div><div class="line"><span class="keyword">void</span> dfs(<span class="keyword">int</span> x , <span class="keyword">int</span> y)</div><div class="line">{</div><div class="line">    g[x][y] = <span class="string">'#'</span>;</div><div class="line">    cnt ++;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">4</span> ; i ++)</div><div class="line">    {</div><div class="line">        <span class="keyword">int</span> xx = x + d[i][<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> yy = y + d[i][<span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span>(xx &gt;= <span class="number">0</span> && xx &lt; n && yy &gt;= <span class="number">0</span> && yy &lt; m && g[xx][yy] == <span class="string">'.'</span>)</div><div class="line">            dfs(xx , yy);</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">{</div><div class="line">    <span class="preprocessor">#ifdef DoubleQ</span></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,stdin);</div><div class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></div><div class="line">    std::ios::sync_with_stdio(<span class="keyword">false</span>);</div><div class="line">    std::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n)</div><div class="line">    {</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">0</span> && m == <span class="number">0</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">int</span> si , sj;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++)</div><div class="line">        {</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; s;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; m ; j ++)</div><div class="line">            {</div><div class="line">                g[i][j] = s[j];</div><div class="line">                <span class="keyword">if</span>(s[j] == <span class="string">'@'</span>)</div><div class="line">                {</div><div class="line">                    si = i;</div><div class="line">                    sj = j;</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line">        cnt = <span class="number">0</span>;</div><div class="line">        dfs(si , sj);</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; endl;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h1 id="POJ1979">POJ1979</h1>
<p><strong>题目链接：</strong>  </p>
<p>　　<a href="http://poj.org/problem?id=1979" target="_blank" rel="external">传]]>
    </summary>
    
      <category term="DFS" scheme="http://zhanghe.ac.cn/tags/DFS/"/>
    
      <category term="POJ" scheme="http://zhanghe.ac.cn/categories/POJ/"/>
    
  </entry>
  
</feed>
